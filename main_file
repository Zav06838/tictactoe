`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 11/25/2021 10:13:24 AM
// Design Name:
// Module Name: tp_level_mod
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////


//`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 11/23/2021 01:20:43 PM
// Design Name:
// Module Name: tp_level_mod
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////
module dff (
clk,
reset,
d,
q,
qb
);
input clk;
input reset;
input d;
output q;
output qb;
reg q;
assign qb = ~q;
always @(posedge clk or posedge reset)
begin
if (reset) 
    begin
// Asynchronous reset when reset goes high
q <= 1'b0;
end
else
begin
q <= d;
end
end
endmodule


module clk_div(clk,clk_d);
  parameter div_value=1;
  input clk;
  output clk_d;
  reg clk_d;
  reg count;
  initial
    begin
      clk_d=0;
      count=0;
    end
  always @(posedge clk)
    begin
      if (count==div_value)
        count<=0;
       else
         count<=count+1;
    end
  always @(posedge clk)
    begin
      if (count==div_value)
        clk_d=~clk_d;
    end
endmodule

module counter_10bit(clk,h_count,trig_v);
  input clk;
  output[9:0] h_count;
  reg [9:0] h_count;
  output trig_v;
  reg trig_v;
  initial trig_v=0;
  initial h_count=0;
 
  always @ (posedge clk)
    begin
      if (h_count<=798)
        begin
          h_count<=h_count+1;
          trig_v<=0;
        end
      else
        begin
         
          trig_v<=1;
          h_count<=0;
        end
    end
endmodule

module bitv_counter(clk,enable_v,v_count);
  input clk;
  input enable_v;
  output[9:0] v_count;
  reg [9:0] v_count;
 
  initial v_count=0;
 
   
  always @ (posedge clk)
    begin
      if (enable_v==1'b1)
    begin
      if (v_count<524)
        begin
          v_count<=v_count+1;
        end
      else
        begin
          v_count<=0;
         
        end
     
    end
    end
   
endmodule
       
//module combination_of_the_two(clk,h_count,v_count);
//  input clk;
//  output [9:0] h_count;
//  output [9:0]  v_count;
//  wire intermediate;
//  wire new_clk;
//  clk_div g67 (.clk(clk),.clk_d(new_clk));
//  counter_10bit g78 (.clk(new_clk),.h_count(h_count),.trig_v(intermediate));
//  counterv_10bit g122(.clk(new_clk),.enable_v(intermediate),.v_count(v_count));
//endmodule

`timescale 1ns / 1ps
//applying inputs within the the module
module vga_sync(
  input [9:0] h_count,
  input [9:0] v_count,
  output h_sync,
  output v_sync,
  output video_on,
  output [9:0] x_loc,
  output [9:0] y_loc
);

  //Horizontal Sync values
  localparam HD = 640;
  localparam HF = 16;
  localparam HB = 48;
  localparam HR = 96;
 
  //Vertical Sync values
  localparam VD = 480;
  localparam VF = 10;
  localparam VB = 33;
  localparam VR = 2;
 
//assigning x location values to horizontal counts and y to vertical counter
  assign x_loc = h_count;
  assign y_loc = v_count;
 
 //setting limits for horizontal sync where the output should be high and likewise to the vertical sync
  assign h_sync = (h_count< (HD + HF)) | (h_count >= (HD+HF+HR));
  assign v_sync = (v_count< (VD + VF)) | (v_count >= (VD+VF+VR));
//setting range and conditions where the video output should be on
  assign video_on = (h_count < (HD)) && (v_count < VD);
 
endmodule
module startup(input [9:0] pixel_x,
  input [9:0] pixel_y,
  output   squad);
  
  
  reg [0:29] startup [29:0];
  
  wire [5:0] x = pixel_x[9:4] - 5;
  wire [5:0] y = pixel_y[9:4];
  assign squad = startup[y][x];
  
   initial begin
    startup[0]  = 30'b111111111111111111111111111111; 
    startup[1]  = 30'b000000000000000000000000000000; 
    startup[2]  = 30'b000000000000000000000000000000; 
    startup[3]  = 30'b000000000000000000000000000000; 
    startup[4]  = 30'b000001111101111101111000000000; 
    startup[5]  = 30'b000001010101010101001000000000; 
    startup[6]  = 30'b000000010000010001000000000000; 
    startup[7]  = 30'b000000010001010101001000000000; 
    startup[8]  = 30'b000000010001111101111000000000; 
    startup[9]  = 30'b000000000000000000000000000000; 
    startup[10] = 30'b000000000000000000000000000000;
    startup[11] = 30'b000001111101111101111000000000; 
    startup[12] = 30'b000001010101000101001000000000; 
    startup[13] = 30'b000000010001111101000000000000; 
    startup[14] = 30'b000000010001000101001000000000; 
    startup[15] = 30'b000000010001000101111000000000; 
    startup[16] = 30'b000000000000000000000000000000; 
    startup[17] = 30'b000000000000000000000000000000;
    startup[18] = 30'b000001111101111101111100000000;
    startup[19] = 30'b000001010101000101000100000000; 
    startup[20] = 30'b000000010001000101110000000000; 
    startup[21] = 30'b000000010001000101000100000000; 
    startup[22] = 30'b000000010001111101111100000000; 
    startup[23] = 30'b000000000000000000000000000000; 
    startup[24] = 30'b000000000000000000000000000000; 
    startup[25] = 30'b000000000000000000000000000000; 
    startup[26] = 30'b000000000000000000000000000000; 
    startup[27] = 30'b000000000000000000000000000000; 
    startup[28] = 30'b000000000000000000000000000000; 
    startup[29] = 30'b111111111111111111111111111111; 

  end
endmodule
module win_screen(input [9:0] pixel_x,
  input [9:0] pixel_y,
  output   squad);
  
  
  reg [0:33] startup [33:0];
  
  wire [5:0] x = pixel_x[9:4]-4;
  wire [5:0] y = pixel_y[9:4];
  assign squad = startup[y][x];
  
   initial begin
    startup[0]  = 34'b00000000000000000000000000000000000; 
    startup[1]  = 34'b00000000000000000000000000000000000; 
    startup[2]  = 34'b00000000000000000000000000000000000; 
    startup[3]  = 34'b00000000000000000000000000000000000; 
    startup[4]  = 34'b00000000000000000000000000000000000; 
    startup[5]  = 34'b00000000000000000000000000000000000; 
    startup[6]  = 34'b00000000000000000000000000000000000; 
    startup[7]  = 34'b00000000000000000100000000000000000; 
    startup[8]  = 34'b00000111110111110111110000000000000; 
    startup[9]  = 34'b00000100010100010100010000000000000; 
    startup[10] = 34'b00000100010100000100010000000000000;
    startup[11] = 34'b00000101110111000100010000000000000; 
    startup[12] = 34'b00000101000100000100010000000000000; 
    startup[13] = 34'b00000101000100010100010000000000000; 
    startup[14] = 34'b00000101000111110111110000000000000; 
    startup[15] = 34'b00000000000000000000000000000000000; 
    startup[16] = 34'b00000000000000000000000000000000000; 
    startup[17] = 34'b00000000000000000000000000000000000;
    startup[18] = 34'b00000100010111110111110111110000000;
    startup[19] = 34'b00000100010101010100010100000000000; 
    startup[20] = 34'b00000100010001000100010100000000000; 
    startup[21] = 34'b00000101010001000100010111110000000; 
    startup[22] = 34'b00000101010001000100010000010000000; 
    startup[23] = 34'b00000101010101010100010000010000000; 
    startup[24] = 34'b00000111110111110100010111110000000; 
    startup[25] = 34'b00000000000000000000000000000000000; 
    startup[26] = 34'b00000000000000000000000000000000000; 
    startup[27] = 34'b00000000000000000000000000000000000; 
    startup[28] = 34'b00000000000000000000000000000000000; 
    startup[29] = 34'b00000000000000000000000000000000000; 
    startup[30] = 34'b00000000000000000000000000000000000; 
    startup[31] = 34'b00000000000000000000000000000000000; 
    startup[32] = 34'b00000000000000000000000000000000000; 
    startup[33] = 34'b00000000000000000000000000000000000; 
    startup[34] = 34'b11111111111111111111111111111111111; 

  end
endmodule

module win_screen2(input [9:0] pixel_x,
  input [9:0] pixel_y,
  output   squad);
  
  
  reg [0:33] startup [33:0];
  
  wire [5:0] x = pixel_x[9:4] - 4;
  wire [5:0] y = pixel_y[9:4];
  assign squad = startup[y][x];
  
   initial begin
    startup[0]  = 34'b00000000000000000000000000000000000; 
    startup[1]  = 34'b00000000000000000000000000000000000; 
    startup[2]  = 34'b00000000000000000000000000000000000; 
    startup[3]  = 34'b00000000000000000000000000000000000; 
    startup[4]  = 34'b00000000000000000000000000000000000; 
    startup[5]  = 34'b00000000000000000000000000000000000; 
    startup[6]  = 34'b00000000000000000000000000000000000; 
    startup[7]  = 34'b00000111110100001001011110000000000; 
    startup[8]  = 34'b00000100010100001001010010000000000; 
    startup[9]  = 34'b00000100010100001001010000000000000; 
    startup[10] = 34'b00000111110100001001011100000000000;
    startup[11] = 34'b00000100010100001001010000000000000; 
    startup[12] = 34'b00000100010100001001010010000000000; 
    startup[13] = 34'b00000111110111101111011110000000000;
    startup[14] = 34'b00000000000000000000000000000000000; 
    startup[15] = 34'b00000000000000000000000000000000000; 
    startup[16] = 34'b00000000000000000000000000000000000;
    startup[17] = 34'b00000100010111110111110111110000000;
    startup[18] = 34'b00000100010101010100010100000000000; 
    startup[19] = 34'b00000100010001000100010100000000000; 
    startup[20] = 34'b00000101010001000100010111110000000; 
    startup[21] = 34'b00000101010001000100010000010000000; 
    startup[22] = 34'b00000101010101010100010000010000000; 
    startup[23] = 34'b00000111110111110100010111110000000; 
    startup[24] = 34'b00000000000000000000000000000000000; 
    startup[25] = 34'b00000000000000000000000000000000000; 
    startup[26] = 34'b00000000000000000000000000000000000; 
    startup[27] = 34'b00000000000000000000000000000000000; 
    startup[28] = 34'b00000000000000000000000000000000000; 
    startup[29] = 34'b00000000000000000000000000000000000; 
    startup[30] = 34'b00000000000000000000000000000000000; 
    startup[31] = 34'b00000000000000000000000000000000000; 
    startup[32] = 34'b00000000000000000000000000000000000; 
    startup[33] = 34'b11111111111111111111111111111111111; 

  end
endmodule



module win_screen3(input [9:0] pixel_x,
  input [9:0] pixel_y,
  output   squad);
  
  
  reg [0:33] startup [33:0];
  
  wire [5:0] x = pixel_x[9:4]-4;
  wire [5:0] y = pixel_y[9:4];
  assign squad = startup[y][x];
  
   initial begin
        startup[0]  = 34'b00000000000000000000000000000000000; 
    startup[1]  = 34'b00000000000000000000000000000000000; 
    startup[2]  = 34'b00000000000000000000000000000000000; 
    startup[3]  = 34'b00000000000000000000000000000000000; 
    startup[4]  = 34'b00000000000000000000000000000000000; 
    startup[5]  = 34'b00000000000000000000000000000000000; 
    startup[6]  = 34'b00000000000000000000000000000000000; 
    startup[7]  = 34'b00000000000000000000000000000000000; 
    startup[8]  = 34'b00000000000000000000000000000000000; 
    startup[9]  = 34'b00000000000000000000000000000000000; 
    startup[10] = 34'b00000111101111011110100010000000000;
    startup[11] = 34'b00000100101001010010100010000000000; 
    startup[12] = 34'b00000100101001010010100010000000000; 
    startup[13] = 34'b00000100101001010010100010000000000;
    startup[14] = 34'b00000100101110011110101010000000000; 
    startup[15] = 34'b00000100101001010010101010000000000; 
    startup[16] = 34'b00000100101001010010101010000000000;
    startup[17] = 34'b00000100101001010010101010000000000;
    startup[18] = 34'b00000111101001010010111110000000000; 
    startup[19] = 34'b00000100000000000000000000000000000; 
    startup[20] = 34'b00000000000000000000000000000000000; 
    startup[21] = 34'b00000000000000000000000000000000000; 
    startup[22] = 34'b00000000000000000000000000000000000; 
    startup[23] = 34'b00000000000000000000000000000000000; 
    startup[24] = 34'b00000000000000000000000000000000000; 
    startup[25] = 34'b00000000000000000000000000000000000; 
    startup[26] = 34'b00000000000000000000000000000000000; 
    startup[27] = 34'b00000000000000000000000000000000000; 
    startup[28] = 34'b00000000000000000000000000000000000; 
    startup[29] = 34'b00000000000000000000000000000000000; 
    startup[30] = 34'b00000000000000000000000000000000000; 
    startup[31] = 34'b00000000000000000000000000000000000; 
    startup[32] = 34'b00000000000000000000000000000000000; 
    startup[33] = 34'b11111111111111111111111111111111111; 
  end
endmodule





module pixel_gen(
  output reg [3:0] red = 0,
   output   reg [3:0] green = 0,
    output  reg [3:0] blue = 0,
   
  input [9:0] pixel_x, pixel_y,
  input video_on,
  input clk_d,input[1:0] state,input [1:0] state_1 ,state_2,state_3,state_4,state_5,state_6,state_7,state_8,
  input led_p1,led_p2,rst,
  input [2:0] state_10, input[1:0] gamestate,input led_p3 );//pixel clock
   reg check=1'b0;
   wire squad3;
    wire squad4;
    wire squad5;
    wire squad6;
   startup g32(pixel_x,pixel_y,squad3);
   win_screen g65(pixel_x,pixel_y,squad4);
   win_screen2 g72(pixel_x,pixel_y,squad5);
   win_screen3 g109(pixel_x,pixel_y,squad6);
   
  always @(posedge clk_d) begin

    
      if (gamestate==2'b00 && led_p3==0)
    begin
     if (squad3)
    begin 
    red<=4'hF;
    green<=4'hF;
    blue<=4'hF;
     end
         else begin
                red <= 4'h0;
                green <=4'h0;
                blue <= 4'h0;
            end
     
     end 
     
   else if (gamestate==2'b10 && led_p3==0)
   begin
   if (squad4)
    begin 
    red<=4'hF;
    green<=4'hF;
    blue<=4'hF;
     end
         else begin
                red <= 4'h0;
                green <=4'h0;
                blue <= 4'h0;
            end
   end 
     else if (gamestate==2'b11 && led_p3==0)
   begin
   if (squad5)
    begin 
    red<=4'hF;
    green<=4'hF;
    blue<=4'hF;
     end
         else begin
                red <= 4'h0;
                green <=4'h0;
                blue <= 4'h0;
            end
   end
   else if (led_p3==1)
   begin
   if (squad6)
    begin 
    red<=4'hF;
    green<=4'hF;
    blue<=4'hF;
     end
         else begin
                red <= 4'h0;
                green <=4'h0;
                blue <= 4'h0;
            end
     
   end
    else if (gamestate==2'b01)
      begin
      
        if ( (pixel_x>30 && pixel_x<150 && pixel_y>25 && pixel_y<150) )
          begin 
          if (state==2'b01 )
          begin
          
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if(state==2'b10 )
          begin
          red<=4'h0;
          blue<=4'hF;
          green<=4'h0;
          end
          else
          begin
          red<=4'h0;
          blue<=4'h0;
          green<=4'h0;
          end
          end
           else if ( (pixel_x>250 && pixel_x<370 && pixel_y>25 && pixel_y<150) )
          begin
          if (state_1==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_1==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end 
          else if ( (pixel_x>470 && pixel_x<590 && pixel_y>25 && pixel_y<150) )
          begin
          if (state_2==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_2==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end 
          else if ( (pixel_x>30 && pixel_x<150 && pixel_y>210 && pixel_y<300) )
          begin
          if (state_3==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_3==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end 
          
          else if ( (pixel_x>250 && pixel_x<370&& pixel_y>210 && pixel_y<300) )
          begin
          if (state_4==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_4==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end
          
         else if ( (pixel_x>30 && pixel_x<150 && pixel_y>210 && pixel_y<300) )
          begin
          if (state_3==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_3==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end 
          
          else if ( (pixel_x>470 && pixel_x<590 && pixel_y>210 && pixel_y<300) )
          begin
          if (state_5==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_5==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end
          else if ( (pixel_x>30 && pixel_x<150 && pixel_y>360 && pixel_y<470) )
          begin
          if (state_6==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_6==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end
          
          else if ( (pixel_x>250 && pixel_x<370 && pixel_y>360 && pixel_y<470) )
          begin
          if (state_7==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_7==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end
          
          else if ( (pixel_x>470 && pixel_x<590 && pixel_y>360 && pixel_y<470) )
          begin
          if (state_8==2'b01)          
          begin
            red<=4'hF;
            blue<=4'h0;
            green<=4'h0;
          end
          else if (state_8==2'b10  )
          begin
            red<=4'h0;
            blue<=4'hF;
            green<=4'h0;
          end
          else
          begin
           red<=4'h0;
            blue<=4'h0;
            green<=4'h0;
          end 
          end
          
        else
          begin 
          red<= video_on? (((pixel_y > 170 && pixel_y<190)|| (pixel_y>320 && pixel_y<340)||(pixel_x>200 && pixel_x<220)||( pixel_x>420 && pixel_x<440))? 4'hF:4'h0):(4'h0);
           green<= video_on? (((pixel_y > 170 && pixel_y<190)|| (pixel_y>320 && pixel_y<340)||(pixel_x>200 && pixel_x<220)||( pixel_x>420 && pixel_x<440))? 4'hF:4'h0):(4'h0);
            blue <= video_on? (((pixel_y > 170 && pixel_y<190)|| (pixel_y>320 && pixel_y<340)||(pixel_x>200 && pixel_x<220)||( pixel_x>420 && pixel_x<440))? 4'hF:4'h0):(4'h0);
          end
       
      end
  end
endmodule

 
module tp_level_mod(clk,h_sync,v_sync,red, green, blue, state,state_1,state_2,state_3,state_4,state_5,state_6,state_7,state_8,led_p1,led_p2,rst,state_10,gamestate,led_p3);
  input clk;
  input [1:0] state,state_1,state_2,state_3,state_4,state_5,state_6,state_7,state_8;
  input led_p1,led_p2,led_p3;
  input rst;
  input [2:0] state_10;
  input [1:0] gamestate;
  output h_sync, v_sync;
  output [3:0] red, green, blue;
  wire trig_v, clk_d;
  wire [9:0] h_count, v_count,x_loc,y_loc;
 
//connecting all the modules from reference of the top module
  clk_div c1(clk, clk_d);
  counter_10bit c2(clk_d,h_count,trig_v);
  bitv_counter v1(clk_d,trig_v,v_count);
  vga_sync v2(h_count, v_count,h_sync, v_sync, video_on,x_loc,y_loc);
  pixel_gen p1(red,green,blue,x_loc,y_loc,video_on,clk_d,state,state_1,state_2,state_3,state_4,state_5,state_6,state_7,state_8,led_p1,led_p2,rst,state_10,gamestate,led_p3);
 
endmodule
// Code your design here
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11/26/2021 01:20:30 PM
// Design Name: 
// Module Name: state_machines
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11/26/2021 11:54:00 AM
// Design Name: 
// Module Name: keyboard
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`timescale 1ns / 1ps

module Keyboard(
	input CLK,	//board clock
   input PS2_CLK,	//keyboard clock and data signals
   input PS2_DATA,
//	output reg scan_err,			//These can be used if the Keyboard module is used within a another module
//	output reg [10:0] scan_code,
//	output reg [3:0]COUNT,
//	output reg TRIG_ARR,
  output reg [7:0] CODEWORD,
   output reg up, reg down, reg left, reg right	//8 LEDs
   );

	wire [7:0] ARROW_UP = 8'h1C;	//codes for arrows
	wire [7:0] ARROW_DOWN = 8'h72;
	wire [7:0] ARROW_LEFT = 8'h6B;
	wire [7:0] ARROW_RIGHT = 8'h74;
	//wire [7:0] EXTENDED = 8'hE0;	//codes 
	//wire [7:0] RELEASED = 8'hF0;

	reg read;				//this is 1 if still waits to receive more bits 
	reg [11:0] count_reading;		//this is used to detect how much time passed since it received the previous codeword
	reg PREVIOUS_STATE;			//used to check the previous state of the keyboard clock signal to know if it changed
	reg scan_err;				//this becomes one if an error was received somewhere in the packet
	reg [10:0] scan_code;			//this stores 11 received bits
	reg [7:0] CODEWORD;			//this stores only the DATA codeword
	reg TRIG_ARR;				//this is triggered when full 11 bits are received
	reg [3:0]COUNT;				//tells how many bits were received until now (from 0 to 11)
	reg TRIGGER = 0;			//This acts as a 250 times slower than the board clock. 
	reg [7:0]DOWNCOUNTER = 0;		//This is used together with TRIGGER - look the code

	//Set initial values
	initial begin
		PREVIOUS_STATE = 1;		
		scan_err = 0;		
		scan_code = 0;
		COUNT = 0;			
		CODEWORD = 0;
		read = 0;
		count_reading = 0;
		up = 0;
        right = 0;
        left = 0;
        down = 0;
	end

	always @(posedge CLK) begin				//This reduces the frequency 250 times
		if (DOWNCOUNTER < 249) begin			//and uses variable TRIGGER as the new board clock 
			DOWNCOUNTER <= DOWNCOUNTER + 1;
			TRIGGER <= 0;
		end
		else begin
			DOWNCOUNTER <= 0;
			TRIGGER <= 1;
		end
	end
	
	always @(posedge CLK) begin	
		if (TRIGGER) begin
			if (read)				//if it still waits to read full packet of 11 bits, then (read == 1)
				count_reading <= count_reading + 1;	//and it counts up this variable
			else 						//and later if check to see how big this value is.
				count_reading <= 0;			//if it is too big, then it resets the received data
		end
	end


	always @(posedge CLK) begin		
	if (TRIGGER) begin						//If the down counter (CLK/250) is ready
		if (PS2_CLK != PREVIOUS_STATE) begin			//if the state of Clock pin changed from previous state
			if (!PS2_CLK) begin				//and if the keyboard clock is at falling edge
				read <= 1;				//mark down that it is still reading for the next bit
				scan_err <= 0;				//no errors
				scan_code[10:0] <= {PS2_DATA, scan_code[10:1]};	//add up the data received by shifting bits and adding one new bit
				COUNT <= COUNT + 1;			//
			end
		end
		else if (COUNT == 11) begin				//if it already received 11 bits
			COUNT <= 0;
			read <= 0;					//mark down that reading stopped
			TRIG_ARR <= 1;					//trigger out that the full pack of 11bits was received
			//calculate scan_err using parity bit
			if (!scan_code[10] || scan_code[0] || !(scan_code[1]^scan_code[2]^scan_code[3]^scan_code[4]
				^scan_code[5]^scan_code[6]^scan_code[7]^scan_code[8]
				^scan_code[9]))
				scan_err <= 1;
			else 
				scan_err <= 0;
		end	
		else  begin						//if it yet not received full pack of 11 bits
			TRIG_ARR <= 0;					//tell that the packet of 11bits was not received yet
			if (COUNT < 11 && count_reading >= 4000) begin	//and if after a certain time no more bits were received, then
				COUNT <= 0;				//reset the number of bits received
				read <= 0;				//and wait for the next packet
			end
		end
	PREVIOUS_STATE <= PS2_CLK;					//mark down the previous state of the keyboard clock
	end
	end


	always @(posedge CLK) begin
		if (TRIGGER) begin					//if the 250 times slower than board clock triggers
			if (TRIG_ARR) begin				//and if a full packet of 11 bits was received
				if (scan_err) begin			//BUT if the packet was NOT OK
					CODEWORD <= 8'd0;		//then reset the codeword register
				end
				else begin
					CODEWORD <= scan_code[8:1];	//else drop down the unnecessary  bits and transport the 7 DATA bits to CODEWORD reg
				end				//notice, that the codeword is also reversed! This is because the first bit to received
			end					//is supposed to be the last bit in the codeword…
			else CODEWORD <= 8'd0;				//not a full packet received, thus reset codeword
		end
		else CODEWORD <= 8'd0;					//no clock trigger, no data…
	end
	
	always @(posedge CLK) begin

		if (CODEWORD == ARROW_UP)//if the CODEWORD has the same code as the ARROW_UP code
		begin				
			up = 1;
			down = 0;	
			left = 0;
			right =0;	
		end			//count up the LED register to light up LEDs
		else if (CODEWORD == ARROW_DOWN)
		begin				
			up = 0;
			down = 1;	
			left = 0;
			right = 0;	
		end			//count down LED register 
        else if (CODEWORD == ARROW_LEFT)	
		begin				
			up = 0;
			down = 0;	
			left = 1;
			right = 0;	
		end	
        else if (CODEWORD == ARROW_RIGHT)	
		begin				
			up = 0;
			down = 0;	
			left = 0;
			right = 1;	
		end	
	end

endmodule

module GameSquare(
	input clk, rst,
   input PS2_CLK,	//keyboard clock and data signals
   input PS2_DATA,
	output reg up, reg down, reg left, reg right,
	output h_sync,
  	output v_sync,
  	output [3:0] red, green, blue,
  	output reg led_p1,led_p2
  
);
  reg led_p3;
  wire [7:0] CODEWORD;
  wire up;
  wire down;
  wire left;
  wire right;
  reg  [1:0] gamestate;
  reg dA;
  reg dC;
  tp_level_mod g1(.clk(clk),.h_sync(h_sync),.v_sync(v_sync),.red(red), .green(green),.blue(blue),.state(state),.state_1(state_1),.state_2(state_2),.state_3(state_3),.state_4(state_4),.state_5(state_5),.state_6(state_6),.state_7(state_7),.state_8(state_8),.led_p1(led_p1),.led_p2(led_p2),.rst(rst),.state_10(state_10),.gamestate(gamestate),.led_p3(led_p3));
  wire dB;
  wire dD;
  Keyboard k1(
     .CLK(clk),	//board clock
    .PS2_CLK(PS2_CLK),	
    .PS2_DATA(PS2_DATA),
    .CODEWORD(CODEWORD),
    .up(up), .down(down), .left(left), .right(right)	//8 LEDs
   );
       dff g76(clk,0,dC,dD,~dD);
   		dff g46(clk,0,dA,dB,~dB);
	parameter S0 = 2'b00;
	parameter S1 = 2'b01;
	parameter S2 = 2'b10;
	parameter S3 = 2'b11;  
    parameter S4 = 3'b000;
	parameter S5 = 3'b001;
	parameter S6 = 3'b010;
	parameter S7=3'b011;
	parameter S8=3'b100;
	reg [1:0] state, next_state,state_1,next_state_1,state_2,next_state_2,state_3,next_state_3,state_4,next_state_4,state_5,next_state_5,state_6,next_state_6,state_7,next_state_7,state_8,next_state_8,state_9, next_state_9;
	reg [2:0] state_10,next_state_10;
	reg [4:0]  count;
	initial count=0;
	reg [1:0] winner,next_winner;
	reg next_1,next_2,next_3;// led next state 
	reg inn,next_inn;//enter key

	always@(posedge clk or negedge rst) begin
		
		if(~rst)	
		begin
		inn<=0;
		state <= S0; 
		state_1<=S0;
		state_2<=S0;
		state_3<=S0;
		state_4<=S0;
		state_5<=S0;
		state_6<=S0;
		state_7<=S0;
		state_8<=S0;
		state_9<=S0;
		state_10<=S4;
		winner<=S0;
		led_p1<=0;
		led_p2<=0;
		led_p3<=0;
        gamestate<=S0;
		end 
		else 	
		begin 
		state <= next_state; 
		state_1<=next_state_1;
		state_2<=next_state_2;
		state_3<=next_state_3;
		state_4<=next_state_4;
		state_5<=next_state_5;
		state_6<=next_state_6;
		state_7<=next_state_7;
		state_8<=next_state_8;
		state_9<=next_state_9;
		state_10<=next_state_10;
		winner<=next_winner;
		led_p1<=next_1;
		led_p2<=next_2;
		led_p3<=next_3;
		gamestate[0]<=dB;
		gamestate[1]<=dD;
		inn<=next_inn;
		end 
	end  
		  
	always @(*)  begin 
        next_inn<=inn;
		next_state <= state;
		next_state_1<=state_1;
		next_state_2<=state_2;
		next_state_3<=state_3;
		next_state_4<=state_4;
		next_state_5<=state_5;
		next_state_6<=state_6;
		next_state_7<=state_7;
		next_state_8<=state_8;
		next_state_9<=state_9;
		next_winner<=winner;
		next_state_10<=state_10;
		next_1<=led_p1;
		next_2<=led_p2;
		next_3<=led_p3;
		//tp_level_mod g1(.clk(clk),.h_sync(h_sync),.v_sync(v_sync),.red(red), .green(green),.blue(blue),.state(state));
		//marked <= 0; owner <= 0; err <= 0;
		
		if (CODEWORD==8'h5A )
		begin
	          next_inn<=1;
		end 
		
		case(state)
			S0: begin
				
               if (CODEWORD==8'h15 && state_9==S0 && gamestate == S1)
               begin
//                    count<=count+1;
					next_state <= S1;
					next_state_9<=S1;
//					count<=count+1;
					end
              if (CODEWORD==8'h43 && state_9==S1 && gamestate == S1) 
              begin
					next_state <= S2;
					next_state_9<=S0;
//					count<=count+1;
					end
              else if(CODEWORD==8'h0)
					next_state <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state <= S1;
              else if(CODEWORD==8'h15)
					next_state <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state <= S2; 
              else if(CODEWORD == 8'h43)  
					next_state <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_1)
			S0: begin
				
               if (CODEWORD==8'h1D && state_9==S0 && gamestate == S1)
               begin
					next_state_1 <= S1;
					next_state_9<=S1;
//					count<=count+1;
					end
              if (CODEWORD==8'h44 && state_9==S1 && gamestate == S1) 
              begin
					next_state_1<= S2;
//					count<=count+1;
                    next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_1 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_1 <= S1;
              else if(CODEWORD==8'h1D)
					next_state_1 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_1 <= S2; 
              else if(CODEWORD == 8'h44)  
					next_state_1 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_2)
			S0: begin
				
               if (CODEWORD==8'h24 && state_9==S0 && gamestate == S1)
                    begin
					next_state_2 <= S1;
//					count<=count+1;
                    next_state_9<=S1;
					end 
               if (CODEWORD==8'h4D && state_9==S1 && gamestate == S1) 
                    begin
					next_state_2<= S2;
//					count<=count+1;
                    next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_2 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_2 <= S1;
              if(CODEWORD==8'h24)
					next_state_2 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_2 <= S2; 
              else if(CODEWORD == 8'h4D)  
					next_state_2 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		case(state_3)
			S0: begin
				
               if (CODEWORD==8'h1C && state_9==S0 && gamestate == S1)
               begin
					next_state_3 <= S1;
//					count<=count+1;
                    next_state_9<=S1;
					end
              if (CODEWORD==8'h3B && state_9==S1 && gamestate == S1) 
              begin
					next_state_3<= S2;
//					count<=count+1;
                    next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_3 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_3 <= S1;
              else if(CODEWORD==8'h1C)
					next_state_3 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_3 <= S2; 
              else if(CODEWORD == 8'h3B)  
					next_state_3 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_4)
			S0: begin
				
               if (CODEWORD==8'h1B && state_9==S0 && gamestate == S1)
               begin
					next_state_4 <= S1;
//					count<=count+1;
                    next_state_9<=S1;
					end
              if (CODEWORD==8'h42 && state_9==S1 && gamestate == S1)
              begin 
					next_state_4<= S2;
					next_state_9<=S0;
//					count<=count+1;
					end
              else if(CODEWORD==8'h0)
					next_state_4 <= S0;  
			end
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_4 <= S1;
              else if(CODEWORD==8'h1B)
					next_state_4 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_4 <= S2; 
              else if(CODEWORD == 8'h42)  
					next_state_4 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_5)
			S0: begin
				
               if (CODEWORD==8'h23 && state_9==S0 && gamestate == S1)
               begin
					next_state_5 <= S1;
//					count<=count+1;
                    next_state_9<=S1;					
					end
              if (CODEWORD==8'h4B && state_9==S1 && gamestate == S1)
              begin 
					next_state_5<= S2;
					next_state_9<=S0;
//					count<=count+1;
					end
              else if(CODEWORD==8'h0)
					next_state_5 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_5 <= S1;
              else if(CODEWORD==8'h23)
					next_state_5 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_5 <= S2; 
              else if(CODEWORD == 8'h4B)  
					next_state_5 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
        case(state_6)
			S0: begin
				
               if (CODEWORD==8'h22 && state_9==S0 && gamestate == S1)
               begin
					next_state_6 <= S1;
					next_state_9<=S1;
//					count<=count+1;
					end
              if (CODEWORD==8'h32 && state_9==S1 && gamestate == S1)
              begin 
					next_state_6<= S2;
//					count<=count+1;
					next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_6 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_6 <= S1;
              else if(CODEWORD==8'h1Z)
					next_state_6 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_6 <= S2; 
              else if(CODEWORD == 8'h32)  
					next_state_6 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_7)
			S0: begin
				
               if (CODEWORD==8'h21 && state_9==S0 && gamestate == S1)
               begin
					next_state_7 <= S1;
					count<=count+1;
					next_state_9<=S1;
					end
              if (CODEWORD==8'h31 && state_9==S1 && gamestate == S1)
              begin 
					next_state_7<= S2;
//					count<=count+1;
					next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_7 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_7 <= S1;
              else if(CODEWORD==8'h22)
					next_state_7 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_7 <= S2; 
              else if(CODEWORD == 8'h31)  
					next_state_7 <= S2;
			end
			
			//S3: begin
			//	next_state <= S3;
			//end
		endcase 
		
		case(state_8)
			S0: begin
				
               if (CODEWORD==8'h2A && state_9==S0 && gamestate == S1)
               begin
					next_state_8 <= S1;
//					count<=count+1;
					next_state_9<=S1;
					end
              if (CODEWORD==8'h3A && state_9==S1
               && gamestate == S1)
              begin 
					next_state_8<= S2;
//					count<=count+1;
					next_state_9<=S0;
					end
              else if(CODEWORD==8'h0)
					next_state_8 <= S0;  
			end
			
			S1: begin
              if(CODEWORD == 8'h0) 
					next_state_8 <= S1;
              else if(CODEWORD==8'h21)
					next_state_8 <= S1;
			end
			
			S2: begin
              if(CODEWORD == 8'h0) 
					next_state_8 <= S2; 
              else if(CODEWORD == 8'h3A)  
					next_state_8 <= S2;
			end
			
			S3: begin
				next_state <= S3;
			end
		endcase 
		if ( (next_state==S1 && next_state_1==S1&& next_state_2==S1) ||(next_state_3==S1 && next_state_4==S1 && next_state_5==S1) || 
           (next_state_6==S1 && next_state_7==S1 && next_state_8==S1) || (next_state==S1 && next_state_3==S1 && next_state_6==S1) || (next_state_1==S1 && next_state_4==S1 && next_state_7==S1) || (next_state_2==S1 && next_state_5==S1 && next_state_8==S1) || (next_state==S1 && next_state_4==S1 && next_state_8==S1) || (next_state_2==S1 && next_state_4==S1 && next_state_6==S1))
        begin 
            next_winner<=S1;
        end 
        if ( (next_state==S2 && next_state_1==S2&& next_state_2==S2) ||(next_state_3==S2 && next_state_4==S2 && next_state_5==S2) || 
           (next_state_6==S2 && next_state_7==S2 && next_state_8==S2) || (next_state==S2 && next_state_3==S2 && next_state_6==S2) || (next_state_1==S2 && next_state_4==S2 && next_state_7==S2) || (next_state_2==S2 && next_state_5==S2 && next_state_8==S2) || (next_state==S2 && next_state_4==S2 && next_state_8==S2) || (next_state_2==S2 && next_state_4==S2 && next_state_6==S2))
        begin 
            next_winner<=S2;
        end 
        
        if ( next_state!=S0 && next_state_1!=S0&& next_state_2!=S0 && next_state_3!=S0 && next_state_4!=S0 && next_state_5!=S0 && next_state_6!=S0 && next_state_7!=S0 && next_state_8!=S0 )        
           begin 
            next_winner<=S3;
           end 
           
        if (next_winner==S1 && next_2==0 )
		begin 
		next_1<=1;
		end 
		
		if (next_winner==S2 && next_1==0)
		begin 
		next_2<=1;
		end 
		if (next_winner==S3 && next_1==0 && next_2==0)
		begin 
		next_3<=1;
		end 
		
		
		dA<=(gamestate[0]&& ~led_p1 ) || (gamestate[0]&& gamestate[1])|| (~gamestate[1] && ~gamestate[0] && inn);
		dC<=(gamestate[1]) || (gamestate[0] && ~led_p2 && led_p1 ) || ( gamestate[0] && led_p2 && ~led_p1);

		
		
     
    end	
endmodule
